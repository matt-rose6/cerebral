{"ast":null,"code":"var _jsxFileName = \"/Users/codeplus/Desktop/Cerebral/cerebral-frontend/src/pages/Home/Content/Emotions/Emotions.js\";\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport EmotionSlider from './EmotionSlider';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport { phq9, cesdr } from './Survey/Survey';\nimport { createEmotion } from '../../../../services/EmotionServices/emotionServices';\n\nconst styles = theme => ({\n  entryBar: {\n    alignItems: 'center'\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize\n  },\n  block: {\n    display: 'block'\n  },\n  paper: {\n    maxWidth: 936,\n    margin: 'auto',\n    overflow: 'hidden',\n    backgroundColor: '#f2f2f2'\n  },\n  title: {\n    marginTop: '20px'\n  }\n});\n\nfunction Emotions(props) {\n  const {\n    classes\n  } = props;\n  const [emotionState, setEmotionState] = useState({\n    responses: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  });\n\n  const handleSubmit = () => {\n    var tempDate = new Date();\n    var date = tempDate.getFullYear() + '-' + (tempDate.getMonth() + 1) + '-' + tempDate.getDate() + ' ' + tempDate.getHours() + ':' + tempDate.getMinutes() + ':' + tempDate.getSeconds();\n\n    if (localStorage.getItem('uid')) {\n      createEmotion(localStorage.getItem('uid'), date, emotionState.responses);\n      alert('Your survey was successfully recorded');\n      window.location.reload(false);\n    } else alert('You are not registered to enter a survey');\n  };\n\n  const handleSlider = (rating, index) => {\n    var temp = [...emotionState.responses]; //console.log(rating)\n\n    temp[index] = rating;\n    console.log(emotionState.responses);\n    setEmotionState({\n      responses: temp\n    }); //console.log(emotionState);\n  };\n\n  return React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    align: \"center\",\n    paragraph: true,\n    variant: \"h6\",\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Over the last week, how often have you been bothered by any of the following problems?\"), cesdr.map((question, index) => {\n    return React.createElement(EmotionSlider, {\n      title: question,\n      key: index,\n      index: index,\n      handleSlider: handleSlider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }), React.createElement(AppBar, {\n    className: classes.entryBar,\n    position: \"static\",\n    color: \"default\",\n    elevation: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Add survey\"))))));\n}\n\nEmotions.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Emotions);","map":{"version":3,"sources":["/Users/codeplus/Desktop/Cerebral/cerebral-frontend/src/pages/Home/Content/Emotions/Emotions.js"],"names":["React","useState","Paper","PropTypes","AppBar","Toolbar","Grid","Button","EmotionSlider","Typography","withStyles","phq9","cesdr","createEmotion","styles","theme","entryBar","alignItems","searchInput","fontSize","typography","block","display","paper","maxWidth","margin","overflow","backgroundColor","title","marginTop","Emotions","props","classes","emotionState","setEmotionState","responses","handleSubmit","tempDate","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","localStorage","getItem","alert","window","location","reload","handleSlider","rating","index","temp","console","log","map","question","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport EmotionSlider from './EmotionSlider';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport { phq9, cesdr } from './Survey/Survey';\nimport { createEmotion } from '../../../../services/EmotionServices/emotionServices';\n\nconst styles = theme => ({\n  entryBar: {\n\talignItems: 'center',\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize,\n  },\n  block: {\n    display: 'block',\n  },\n  paper: {\n    maxWidth: 936,\n    margin: 'auto',\n    overflow: 'hidden',\n    backgroundColor: '#f2f2f2',\n  },\n  title: {\n\t  marginTop: '20px',\n  }\n});\n\nfunction Emotions(props) {\n  const { classes } = props;\n\n  const [emotionState, setEmotionState] = useState({\n\tresponses: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n  })\n\n  const handleSubmit = () => {\n\tvar tempDate = new Date();\n  \tvar date = tempDate.getFullYear() + '-' + (tempDate.getMonth()+1) + '-' + tempDate.getDate() +' '+ tempDate.getHours()+':'+ tempDate.getMinutes()+':'+ tempDate.getSeconds();  \n\tif(localStorage.getItem('uid')){\n\t\tcreateEmotion(localStorage.getItem('uid'), date, emotionState.responses);\n\t\talert('Your survey was successfully recorded');\n    \twindow.location.reload(false);\n\t} else alert('You are not registered to enter a survey');\n  }\n\n  const handleSlider = (rating, index) => { \n\tvar temp = [...emotionState.responses]\n\t//console.log(rating)\n\ttemp[index] = rating;  \n\tconsole.log(emotionState.responses)\n\tsetEmotionState({responses: temp});\n\t//console.log(emotionState);\n  }\n\n  return (\n\t<Paper className={classes.paper}>\n\t\t<Typography align=\"center\" paragraph variant=\"h6\" className={classes.title}>\n\t\t\tOver the last week, how often have you been bothered by any of the following problems?\n\t\t</Typography>\n\t\t{cesdr.map((question, index) => {\n\t\t\treturn <EmotionSlider \n\t\t\t\ttitle={question} \n\t\t\t\tkey={index}\n\t\t\t\tindex={index}\n\t\t\t\thandleSlider={handleSlider}/>\n\t\t})}\n\t\t<AppBar className={classes.entryBar} position=\"static\" color=\"default\" elevation={0}>\n\t\t\t<Toolbar>\n\t\t\t\t<Grid container spacing={2} alignItems=\"center\">\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t<Button \n\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\tcolor=\"primary\" \n\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd survey\n\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t</Paper>\n  );\n}\n\nEmotions.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Emotions);"]},"metadata":{},"sourceType":"module"}