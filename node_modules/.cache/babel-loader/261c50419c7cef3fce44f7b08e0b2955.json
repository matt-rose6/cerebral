{"ast":null,"code":"var _jsxFileName = \"/Users/codeplus/Desktop/Cerebral/cerebral-frontend/src/pages/Home/Content/Entries/Entries.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createEntry } from '../../../../services/EntryServices/entryService';\n\nconst styles = theme => ({\n  paper: {\n    maxWidth: 936,\n    margin: 'auto',\n    overflow: 'hidden'\n  },\n  enterBar: {\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    alignItems: 'center'\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize\n  },\n  block: {\n    display: 'block'\n  },\n  contentWrapper: {\n    margin: '40px 16px'\n  }\n});\n\nconst handleAddEntry = text => {\n  var tempDate = new Date();\n  var date = tempDate.getFullYear() + '-' + (tempDate.getMonth() + 1) + '-' + tempDate.getDate() + ' ' + tempDate.getHours() + ':' + tempDate.getMinutes() + ':' + tempDate.getSeconds();\n\n  if (localStorage.getItem('uid')) {\n    createEntry(localStorage.getItem('uid'), date, text);\n    alert('Your entry was successfully recorded');\n    window.location.reload(false);\n  } else alert('You are not registered to make a journal entry');\n};\n\nfunction Entries(props) {\n  const {\n    classes\n  } = props;\n  const [text, setText] = useState(\"\");\n  return (// <Paper className={classes.paper}>\n    //   <AppBar className={classes.searchBar} position=\"static\" color=\"default\" elevation={0}>\n    //       <Grid container spacing={2} alignItems=\"center\">\n    //         <Grid item xs>\n    //           <TextField\n    //               id=\"standard-multiline-static\"\n    //               fullWidth\n    //               label=\"New Entry\"\n    //               multiline\n    //               rows=\"10\"\n    //               onChange={(event)=> setText(event.target.value)}\n    //             />\n    //         </Grid>\n    //       </Grid>\n    //       <Toolbar>\n    //       <Grid container spacing={2} alignItems=\"center\">\n    //           <Grid item>\n    //            <Button\n    //              variant=\"contained\" \n    //              color=\"primary\" \n    //              onClick={() => {handleAddEntry(text)}}>\n    //                Add entry\n    //            </Button>\n    //          </Grid>\n    //        </Grid>\n    //      </Toolbar>\n    //   </AppBar>\n    // </Paper>\n    React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-multiline-static\",\n      fullWidth: true,\n      label: \"New Entry\",\n      multiline: true,\n      rows: \"10\",\n      onChange: event => setText(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }))), React.createElement(AppBar, {\n      className: classes.enterBar,\n      position: \"static\",\n      color: \"default\",\n      elevation: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => {\n        handleAddEntry(text);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Add entry\"))))))\n  );\n}\n\nEntries.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Entries);","map":{"version":3,"sources":["/Users/codeplus/Desktop/Cerebral/cerebral-frontend/src/pages/Home/Content/Entries/Entries.js"],"names":["React","useState","PropTypes","AppBar","Toolbar","Paper","Grid","Button","TextField","withStyles","createEntry","styles","theme","paper","maxWidth","margin","overflow","enterBar","borderBottom","alignItems","searchInput","fontSize","typography","block","display","contentWrapper","handleAddEntry","text","tempDate","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","localStorage","getItem","alert","window","location","reload","Entries","props","classes","setText","event","target","value","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createEntry } from '../../../../services/EntryServices/entryService';\n\nconst styles = theme => ({\n  paper: {\n    maxWidth: 936,\n    margin: 'auto',\n    overflow: 'hidden',\n  },\n  enterBar: {\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    alignItems: 'center',\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize,\n  },\n  block: {\n    display: 'block',\n  },\n  contentWrapper: {\n    margin: '40px 16px',\n  },\n});\n\nconst handleAddEntry = (text) => {\n  var tempDate = new Date();\n  var date = tempDate.getFullYear() + '-' + (tempDate.getMonth()+1) + '-' + tempDate.getDate() +' '+ tempDate.getHours()+':'+ tempDate.getMinutes()+':'+ tempDate.getSeconds();\n  if(localStorage.getItem('uid')) {\n    createEntry(localStorage.getItem('uid'), date, text);\n    alert('Your entry was successfully recorded');\n    window.location.reload(false);\n  }\n  else(alert('You are not registered to make a journal entry'));\n};\n\nfunction Entries(props) {\n  const { classes } = props;\n\n  const [text, setText] = useState(\"\");\n\n  return (\n\n    // <Paper className={classes.paper}>\n    //   <AppBar className={classes.searchBar} position=\"static\" color=\"default\" elevation={0}>\n    //       <Grid container spacing={2} alignItems=\"center\">\n    //         <Grid item xs>\n    //           <TextField\n    //               id=\"standard-multiline-static\"\n    //               fullWidth\n    //               label=\"New Entry\"\n    //               multiline\n    //               rows=\"10\"\n    //               onChange={(event)=> setText(event.target.value)}\n    //             />\n    //         </Grid>\n    //       </Grid>\n    //       <Toolbar>\n    //       <Grid container spacing={2} alignItems=\"center\">\n    //           <Grid item>\n    //            <Button\n    //              variant=\"contained\" \n    //              color=\"primary\" \n    //              onClick={() => {handleAddEntry(text)}}>\n    //                Add entry\n    //            </Button>\n    //          </Grid>\n    //        </Grid>\n    //      </Toolbar>\n    //   </AppBar>\n    // </Paper>\n\n    <Paper className={classes.paper}>\n      {/* <AppBar className={classes.enterBar} position=\"static\" color=\"default\" elevation={0}> */}\n      <Grid container>\n        <Grid item xs>\n          <TextField\n            id=\"standard-multiline-static\"\n            fullWidth\n            label=\"New Entry\"\n            multiline\n            rows=\"10\"\n            onChange={(event)=> setText(event.target.value)}\n          />\n        </Grid>\n      </ Grid>\n      <AppBar className={classes.enterBar} position=\"static\" color=\"default\" elevation={0}>\n        <Toolbar>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Button\n                variant=\"contained\" \n                color=\"primary\" \n                onClick={() => {handleAddEntry(text)}}>\n                  Add entry\n              </Button>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </Paper>\n  );\n}\n\nEntries.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Entries);"]},"metadata":{},"sourceType":"module"}