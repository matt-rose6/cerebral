{"ast":null,"code":"var _jsxFileName = \"/Users/codeplus/Desktop/Cerebral/cerebral-frontend/src/pages/Home/Content/Entries/Entries.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createEntry } from '../../../../services/EntryServices/entryService';\n\nconst styles = theme => ({\n  paper: {\n    maxWidth: 936,\n    margin: 'auto',\n    overflow: 'hidden'\n  },\n  enterBar: {\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    alignItems: 'center'\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize\n  },\n  block: {\n    display: 'block'\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '115ch'\n    }\n  },\n  contentWrapper: {\n    margin: '40px 16px'\n  }\n});\n\nconst handleAddEntry = text => {\n  var tempDate = new Date();\n  var date = tempDate.getFullYear() + '-' + (tempDate.getMonth() + 1) + '-' + tempDate.getDate() + ' ' + tempDate.getHours() + ':' + tempDate.getMinutes() + ':' + tempDate.getSeconds();\n\n  if (localStorage.getItem('uid')) {\n    createEntry(localStorage.getItem('uid'), date, text);\n    alert('Your entry was successfully recorded');\n    window.location.reload(false);\n  } else alert('You are not registered to make a journal entry');\n};\n\nfunction Entries(props) {\n  const {\n    classes\n  } = props;\n  const [text, setText] = useState(\"\");\n  return React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.searchBar,\n    position: \"static\",\n    color: \"default\",\n    elevation: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(SearchIcon, {\n    className: classes.block,\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    fullWidth: true,\n    placeholder: \"Search by date\",\n    InputProps: {\n      disableUnderline: true,\n      className: classes.searchInput\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"// \", React.createElement(Tooltip, {\n    title: \"Reload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"//   \", React.createElement(IconButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"//     \", React.createElement(RefreshIcon, {\n    className: classes.block,\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), \"//   \"), \"// \"))))), React.createElement(\"div\", {\n    className: classes.contentWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, showEntries())) // <Paper className={classes.paper}>\n  //   <Grid container className={classes.root}>\n  //   {/* <div className={classes.root}> */}\n  //     <TextField\n  //       id=\"standard-multiline-static\"\n  //       label=\"New Entry\"\n  //       multiline\n  //       rows=\"10\"\n  //       onChange={(event)=> setText(event.target.value)}\n  //     />\n  //   {/* </div> */}\n  //   </ Grid>\n  //   <AppBar className={classes.enterBar} position=\"static\" color=\"default\" elevation={0}>\n  //     <Toolbar>\n  //       <Grid container spacing={2}>\n  //         <Grid item>\n  //           <Button\n  //             variant=\"contained\" \n  //             color=\"primary\" \n  //             onClick={() => {handleAddEntry(text)}}>\n  //               Add entry\n  //           </Button>\n  //         </Grid>\n  //       </Grid>\n  //     </Toolbar>\n  //   </AppBar>\n  // </Paper>\n  ;\n}\n\nEntries.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Entries);","map":{"version":3,"sources":["/Users/codeplus/Desktop/Cerebral/cerebral-frontend/src/pages/Home/Content/Entries/Entries.js"],"names":["React","useState","PropTypes","AppBar","Toolbar","Paper","Grid","Button","TextField","withStyles","createEntry","styles","theme","paper","maxWidth","margin","overflow","enterBar","borderBottom","alignItems","searchInput","fontSize","typography","block","display","root","spacing","width","contentWrapper","handleAddEntry","text","tempDate","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","localStorage","getItem","alert","window","location","reload","Entries","props","classes","setText","searchBar","disableUnderline","className","showEntries","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport { createEntry } from '../../../../services/EntryServices/entryService';\n\nconst styles = theme => ({\n  paper: {\n    maxWidth: 936,\n    margin: 'auto',\n    overflow: 'hidden',\n  },\n  enterBar: {\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    alignItems: 'center',\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize,\n  },\n  block: {\n    display: 'block',\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '115ch',\n    },\n  },\n  contentWrapper: {\n    margin: '40px 16px',\n  },\n});\n\nconst handleAddEntry = (text) => {\n  var tempDate = new Date();\n  var date = tempDate.getFullYear() + '-' + (tempDate.getMonth()+1) + '-' + tempDate.getDate() +' '+ tempDate.getHours()+':'+ tempDate.getMinutes()+':'+ tempDate.getSeconds();\n  if(localStorage.getItem('uid')) {\n    createEntry(localStorage.getItem('uid'), date, text);\n    alert('Your entry was successfully recorded');\n    window.location.reload(false);\n  }\n  else(alert('You are not registered to make a journal entry'));\n};\n\nfunction Entries(props) {\n  const { classes } = props;\n\n  const [text, setText] = useState(\"\");\n\n  return (\n\n    <Paper className={classes.paper}>\n      <AppBar className={classes.searchBar} position=\"static\" color=\"default\" elevation={0}>\n        <Toolbar>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <SearchIcon className={classes.block} color=\"inherit\" />\n            </Grid>\n            <Grid item xs>\n              <TextField\n                fullWidth\n                placeholder=\"Search by date\"\n                InputProps={{\n                  disableUnderline: true,\n                  className: classes.searchInput,\n                }}\n              />\n            </Grid>\n            <Grid item>\n              // <Tooltip title=\"Reload\">\n              //   <IconButton>\n              //     <RefreshIcon className={classes.block} color=\"inherit\" />\n              //   </IconButton>\n              // </Tooltip>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.contentWrapper}>\n        {showEntries()}\n        {/* <Typography color=\"textSecondary\" align=\"center\">\n          No journal entries yet\n        </Typography> */}\n      </div>\n    </Paper>\n\n    // <Paper className={classes.paper}>\n    //   <Grid container className={classes.root}>\n    //   {/* <div className={classes.root}> */}\n    //     <TextField\n    //       id=\"standard-multiline-static\"\n    //       label=\"New Entry\"\n    //       multiline\n    //       rows=\"10\"\n    //       onChange={(event)=> setText(event.target.value)}\n    //     />\n    //   {/* </div> */}\n    //   </ Grid>\n    //   <AppBar className={classes.enterBar} position=\"static\" color=\"default\" elevation={0}>\n    //     <Toolbar>\n    //       <Grid container spacing={2}>\n    //         <Grid item>\n    //           <Button\n    //             variant=\"contained\" \n    //             color=\"primary\" \n    //             onClick={() => {handleAddEntry(text)}}>\n    //               Add entry\n    //           </Button>\n    //         </Grid>\n    //       </Grid>\n    //     </Toolbar>\n    //   </AppBar>\n    // </Paper>\n  );\n}\n\nEntries.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Entries);"]},"metadata":{},"sourceType":"module"}